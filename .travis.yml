os: linux
language: shell

stages:
  - name: Perform tests
  - name: Prepare artifact
    if: branch = master && type != cron
  - name: Deploy
    if: branch = master && type != cron  

services:
  - docker

install:
  - sudo apt-add-repository "deb http://archive.ubuntu.com/ubuntu trusty-backports main restricted universe multiverse"
  - sudo apt-get -qq update
  - sudo apt-get -t trusty-backports install shellcheck
  - sudo pip install awscli

jobs:
  include:
    - stage: Perform tests
      script:
        - echo "Check for commit ${TRAVIS_COMMIT} and tag ${TRAVIS_TAG} from branch ${TRAVIS_BRANCH}."
        - echo "This is build number ${TRAVIS_BUILD_NUMBER}, for ${TRAVIS_REPO_SLUG}."
        - mkdir /tmp/config-custom
        - docker pull almerhor/pylint:default
        - docker run --rm -v $(pwd):/pylint -v $(pwd)/test:/tmp/config-custom almerhor/pylint:default py/cloud_control_check_ec2.py requirements-custom.txt
    
    - stage: Perform tests
      os: linux
      language: java
      addons:
        sonarcloud:
          organization: "alexa-cloud-control"
          token:  
            secure: "KU3wvZrMKXrOtuAbUmLZxPfWfjknz0FBzGnTkoC09SMbHHqXkLjO9hHOEar4dlnAQC2rb4Eom9D/p9w/4nGiXnD04PEtxxuc7jKcs75jJDKBdbqDRoHk1MAv5cFQzsn+b4C90qKatCF2yyw5rb6lNjGBq3zUoLhiWe+Hu1/LPyKLz3T/s+VjjKtEDU7Mf7gMZSk+9Vf8msVw9Q9TE35L2kiDyHBdEi1ARp45Cy/AH5QcyCI3fUHegQc1dnTa7prt2+PTR12SR2pywY6cMFTRIR/Tv5Z3a+WGa9+6L8u/huZVYPZ+otzweXwunXEz5gKnr7utYPlR2t1/GlnpUT7TVxd+oagmZqvJBLnHhvHOg4XpthSw+/BSX2vy/6+tXf7PuoCNdqhm4Rl4Yh+XeD1AmiJidpi1lM7dUGGGHeiQ0GYctM6xqYIS28WR+zyBt9nqdIKvQ+PLwCoEH5Z3ofrNvx54Srsa/S0plP2n4Ke1mLsD6qucNw9d4QNKzkD43VZfyAQDTwEJVMvP1cE0yhqB+MvuasxU4lw7JOP76RCh6VTkJwTRJFEhEkP0vBDngWFgxzRj67RGMLfYNu30rR4SHtE5wX8EuRozRf8L3SpOtZIZnYY1XTs3BOylZVMBNTXw/H+FYJisF8oFU1Z2niVhYaMO2wzm/6GYvVPQqQPVcZc="
      
      script:
        - sonar-scanner

   - stage: Perform tests
      script:
        - sed -i -e "s/ACCOUNTNUMBER/${account_number}/g" Alexa-CC-CheckEc2.yml
        - sed -i -e "s/CONTEXTTABLE/${dynamodb_context}/g" Alexa-CC-CheckEc2.yml
        - aws cloudformation validate-template --region ${terraform_region} --template-body file://Alexa-CC-CheckEc2.yml

    - stage: Perform tests
      script:
        - echo "Check for commit ${TRAVIS_COMMIT} and tag ${TRAVIS_TAG} from branch ${TRAVIS_BRANCH}."
        - echo "This is build number ${TRAVIS_BUILD_NUMBER}, for ${TRAVIS_REPO_SLUG}."
        - sed -i -e "s/ACCOUNTNUMBER/${account_number}/g" Alexa-CC-CheckEc2.yml
        - sed -i -e "s/CONTEXTTABLE/${dynamodb_context}/g" Alexa-CC-CheckEc2.yml
        - docker pull almerhor/cfnlint:latest
        - docker run --rm -v $(pwd)/:/lintfiles almerhor/cfnlint -t Alexa-CC-CheckEc2.yml

    - stage: Prepare artifact
      os: linux
      language: python
      python:
        - "3.6"
      script:
        - echo "Building package"
        - cd artifacts/scripts
        - chmod +x *.sh
        - ./env_prep.sh
        - cd ../..
        - echo "Send artifact to S3"
      deploy:
        - provider: s3
          bucket: "${artifact_bucket}"
          local_dir: artifacts/package
          skip_cleanup: true

    - stage: Deploy
      script:
        - sed -i -e "s/ACCOUNTNUMBER/${account_number}/g" Alexa-CC-CheckEc2.yml
        - sed -i -e "s/CONTEXTTABLE/${dynamodb_context}/g" Alexa-CC-CheckEc2.yml
      deploy:
        provider: cloudformation
        edge: true # use DPLv2
        access_key_id: ${AWS_ACCESS_KEY_ID}
        secret_access_key: ${AWS_SECRET_ACCESS_KEY}
        capabilities: CAPABILITY_NAMED_IAM
        template: Alexa-CC-CheckEc2.yml
        stack_name: Alexa-CC-CheckEc2-Function
        region: ${terraform_region}
        wait: true
        promote: true